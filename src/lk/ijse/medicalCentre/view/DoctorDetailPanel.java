/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ijse.medicalCentre.view;

import java.math.BigDecimal;
import java.util.ArrayList;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JOptionPane;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import javax.swing.table.DefaultTableModel;
import lk.ijse.medicalCentre.controller.ManageDoctorController;
import lk.ijse.medicalCentre.controller.ManageDoctorSessionController;
import lk.ijse.medicalCentre.core.dto.DoctorDTO;
import lk.ijse.medicalCentre.core.dto.DoctorSessionDTO;
import lk.ijse.medicalCentre.validation.Validation;

/**
 *
 * @author pasindu
 */
public class DoctorDetailPanel extends javax.swing.JPanel {
    String doctorID;
    String doctorName;
    String medRegNo;
    String speciality;
    String hospital;
    String telephone;
    /**
     * Creates new form DoctorDetailPanel
     */
    public DoctorDetailPanel() {
        initComponents();
        txtDocName.requestFocus();
        loadAllDoctors();
        //txtDocID.setEditable(false);
        
        tblDoctor.getSelectionModel().addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                
                if (tblDoctor.getSelectedRow() == -1) return;
                doctorID = tblDoctor.getValueAt(tblDoctor.getSelectedRow(), 0).toString();
                doctorName=tblDoctor.getValueAt(tblDoctor.getSelectedRow(), 1).toString();
                medRegNo=tblDoctor.getValueAt(tblDoctor.getSelectedRow(), 2).toString();
                speciality=tblDoctor.getValueAt(tblDoctor.getSelectedRow(), 3).toString();
                hospital=tblDoctor.getValueAt(tblDoctor.getSelectedRow(), 4).toString();
                telephone=tblDoctor.getValueAt(tblDoctor.getSelectedRow(), 5).toString();
                
                txtDocID.setText(doctorID);
                txtDocName.setText(doctorName);
                txtDocReg.setText(medRegNo);
                txtDocSpeciality.setText(speciality);
                txtDocHospital.setText(hospital);
                txtDocNum.setText(telephone);
            }
        });
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXPanel1 = new org.jdesktop.swingx.JXPanel();
        btnAddDoc = new javax.swing.JButton();
        btnClear = new javax.swing.JButton();
        txtDocHospital = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDocNum = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        txtDocReg = new javax.swing.JTextField();
        jLabel3 = new javax.swing.JLabel();
        txtDocSpeciality = new javax.swing.JTextField();
        jLabel4 = new javax.swing.JLabel();
        txtDocName = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        txtDocID = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tblDoctor = new org.jdesktop.swingx.JXTable();
        btnDelete = new org.jdesktop.swingx.JXButton();
        btnUpdate = new org.jdesktop.swingx.JXButton();

        btnAddDoc.setText("Add  DoctorDetails");
        btnAddDoc.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddDocActionPerformed(evt);
            }
        });

        btnClear.setText("Clear ");
        btnClear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnClearActionPerformed(evt);
            }
        });

        txtDocHospital.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocHospitalActionPerformed(evt);
            }
        });

        jLabel2.setText("Hospital Name");

        txtDocNum.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocNumActionPerformed(evt);
            }
        });

        jLabel5.setText("Telephone Number");

        txtDocReg.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocRegActionPerformed(evt);
            }
        });

        jLabel3.setText("Medical Reg.No");

        txtDocSpeciality.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocSpecialityActionPerformed(evt);
            }
        });

        jLabel4.setText("Speciality");

        txtDocName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocNameActionPerformed(evt);
            }
        });

        jLabel6.setText("Name of Doctor");

        txtDocID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDocIDActionPerformed(evt);
            }
        });

        jLabel1.setText("Doctor ID");

        tblDoctor.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null},
                {null, null, null, null, null, null}
            },
            new String [] {
                "Doctor ID", "Doctor Name", "Medical Reg No", "Speciality", "Hospital Name", "Telephone"
            }
        ));
        jScrollPane1.setViewportView(tblDoctor);

        btnDelete.setText("Delete Doctor");
        btnDelete.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnDeleteActionPerformed(evt);
            }
        });

        btnUpdate.setText("Update Details");
        btnUpdate.setToolTipText("Select from table and update relevant text fields");
        btnUpdate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jXPanel1Layout = new javax.swing.GroupLayout(jXPanel1);
        jXPanel1.setLayout(jXPanel1Layout);
        jXPanel1Layout.setHorizontalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel1Layout.createSequentialGroup()
                .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jXPanel1Layout.createSequentialGroup()
                        .addGap(47, 47, 47)
                        .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(134, 134, 134)
                        .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(txtDocID, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDocName, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDocSpeciality, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDocReg, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDocNum, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(txtDocHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnAddDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 138, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jXPanel1Layout.createSequentialGroup()
                        .addGap(24, 24, 24)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 558, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(45, 45, 45)
                        .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(btnUpdate, javax.swing.GroupLayout.DEFAULT_SIZE, 124, Short.MAX_VALUE)
                            .addComponent(btnDelete, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))))
                .addContainerGap(57, Short.MAX_VALUE))
        );
        jXPanel1Layout.setVerticalGroup(
            jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jXPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel3, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jXPanel1Layout.createSequentialGroup()
                        .addComponent(txtDocID, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(txtDocName, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(txtDocSpeciality, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(txtDocReg, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(txtDocNum, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(11, 11, 11)
                        .addComponent(txtDocHospital, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(42, 42, 42)
                .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnClear, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnAddDoc, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jXPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jXPanel1Layout.createSequentialGroup()
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 212, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addContainerGap(22, Short.MAX_VALUE))
                    .addGroup(jXPanel1Layout.createSequentialGroup()
                        .addComponent(btnUpdate, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(btnDelete, javax.swing.GroupLayout.PREFERRED_SIZE, 36, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(124, 124, 124))))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnAddDocActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddDocActionPerformed
        
        if(Validation.validateText(txtDocName.getText())){
            JOptionPane.showMessageDialog(null, "Please fill Name");
            txtDocName.requestFocus();
            return;
        }
        if(Validation.validateText(txtDocSpeciality.getText())){
            JOptionPane.showMessageDialog(null, "Please fill Speciality");
            txtDocSpeciality.requestFocus();
            return;
        }
        if(Validation.validateText(txtDocReg.getText())){
            JOptionPane.showMessageDialog(null, "Please fill medical reg number");
            txtDocReg.requestFocus();
            return;
        }
        if(Validation.validateText(txtDocNum.getText())){
            JOptionPane.showMessageDialog(null, "Please fill telephone number");
            txtDocNum.requestFocus();
            return;
        }
        if(Validation.validateText(txtDocHospital.getText())){
            JOptionPane.showMessageDialog(null, "Please fill name of hospital");
            txtDocHospital.requestFocus();
            return;
        }
        if(Validation.validateMobile(txtDocNum.getText())){
            
            DoctorDTO doctor = new DoctorDTO(txtDocID.getText(),
                txtDocName.getText(), 
                txtDocReg.getText(),
                txtDocSpeciality.getText(),
                txtDocHospital.getText(),
                txtDocNum.getText());
            try {
                boolean result = ManageDoctorController.addDoctor(doctor);

                if (result){
                    JOptionPane.showMessageDialog(this, "Doctor has been successfully added.");
                    loadAllDoctors();                
                }else{
                    JOptionPane.showMessageDialog(this, "Doctor hasn't been added due to some error");
                }

            } catch (Exception ex) {
                JOptionPane.showMessageDialog(null, "Duplicate Entry");
                //Logger.getLogger(DoctorDetailPanel.class.getName()).log(Level.SEVERE, null, ex);
                JOptionPane.showMessageDialog(this, "Doctor hasn't been added due to some error");
            }
            
            
        }else{
            JOptionPane.showMessageDialog(null, "Use this Format for number (xxx-xxxxxxx)");
            txtDocNum.requestFocus();
        }
    }//GEN-LAST:event_btnAddDocActionPerformed

    private void btnClearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnClearActionPerformed
        
        txtDocID.setText("");
        txtDocName.setText("");
        txtDocSpeciality.setText("");
        txtDocReg.setText("");
        txtDocNum.setText("");
        txtDocHospital.setText("");
        txtDocName.requestFocus();
        loadAllDoctors();
    }//GEN-LAST:event_btnClearActionPerformed

    private void txtDocHospitalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocHospitalActionPerformed
        btnAddDoc.requestFocus();
    }//GEN-LAST:event_txtDocHospitalActionPerformed

    private void txtDocNumActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocNumActionPerformed
        txtDocHospital.requestFocus();
    }//GEN-LAST:event_txtDocNumActionPerformed

    private void txtDocRegActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocRegActionPerformed
        txtDocNum.requestFocus();
    }//GEN-LAST:event_txtDocRegActionPerformed

    private void txtDocSpecialityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocSpecialityActionPerformed
        txtDocReg.requestFocus();
    }//GEN-LAST:event_txtDocSpecialityActionPerformed

    private void txtDocNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocNameActionPerformed
        txtDocSpeciality.requestFocus();
    }//GEN-LAST:event_txtDocNameActionPerformed

    private void txtDocIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDocIDActionPerformed
        txtDocName.requestFocus();
    }//GEN-LAST:event_txtDocIDActionPerformed

    private void btnDeleteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnDeleteActionPerformed
        
        DoctorDTO doct = new DoctorDTO(doctorID,
                null, 
                null, 
               null,null,null);
        try {
            boolean result = ManageDoctorController.deleteDoctor(doct);
            
            if (result){
                JOptionPane.showMessageDialog(this, "Doctor has been successfully deleted.");
                loadAllDoctors();
            }else{
                JOptionPane.showMessageDialog(this, "Doctor hasn't been added due to some error");
            }
            
        } catch (Exception ex) {
            Logger.getLogger(DoctorSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_btnDeleteActionPerformed

    private void btnUpdateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateActionPerformed
        if(Validation.validateText(txtDocName.getText())){
            JOptionPane.showMessageDialog(null, "Please fill Name");
            txtDocName.requestFocus();
            return;
        }
        if(Validation.validateText(txtDocSpeciality.getText())){
            JOptionPane.showMessageDialog(null, "Please fill Speciality");
            txtDocSpeciality.requestFocus();
            return;
        }
        if(Validation.validateText(txtDocReg.getText())){
            JOptionPane.showMessageDialog(null, "Please fill medical reg number");
            txtDocReg.requestFocus();
            return;
        }
        if(Validation.validateText(txtDocNum.getText())){
            JOptionPane.showMessageDialog(null, "Please fill telephone number");
            txtDocNum.requestFocus();
            return;
        }
        if(Validation.validateText(txtDocHospital.getText())){
            JOptionPane.showMessageDialog(null, "Please fill name of hospital");
            txtDocHospital.requestFocus();
            return;
        }
        if(Validation.validateMobile(txtDocNum.getText())){
            
        }
        if(Validation.validateMobile(txtDocNum.getText())){
            DoctorDTO doct=new DoctorDTO(txtDocID.getText(), 
                    txtDocName.getText(), 
                    txtDocReg.getText(),
                    txtDocSpeciality.getText() ,
                    txtDocHospital.getText(), 
                    txtDocNum.getText());
            try {
                boolean result=ManageDoctorController.updateDoctor(doct);
                if(result){
                    JOptionPane.showMessageDialog(this, "Doctor details has been successfully Updated.");
                    loadAllDoctors();
                }
                else{
                    JOptionPane.showMessageDialog(this, "Doctor detailhasn't been added due to some error");
                }
            } catch (Exception ex) {
                Logger.getLogger(DoctorDetailPanel.class.getName()).log(Level.SEVERE, null, ex);
            }
            }else{
                JOptionPane.showMessageDialog(null, "Use this Format for number (xxx-xxxxxxx)");
                txtDocNum.requestFocus();
            }
    }//GEN-LAST:event_btnUpdateActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddDoc;
    private javax.swing.JButton btnClear;
    private org.jdesktop.swingx.JXButton btnDelete;
    private org.jdesktop.swingx.JXButton btnUpdate;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JScrollPane jScrollPane1;
    private org.jdesktop.swingx.JXPanel jXPanel1;
    private org.jdesktop.swingx.JXTable tblDoctor;
    private javax.swing.JTextField txtDocHospital;
    private javax.swing.JTextField txtDocID;
    private javax.swing.JTextField txtDocName;
    private javax.swing.JTextField txtDocNum;
    private javax.swing.JTextField txtDocReg;
    private javax.swing.JTextField txtDocSpeciality;
    // End of variables declaration//GEN-END:variables

private void loadAllDoctors(){
        try {
            ArrayList<DoctorDTO> allDoctors = ManageDoctorController.getAllDoctors();
            DefaultTableModel dtm = (DefaultTableModel) tblDoctor.getModel();
            dtm.setRowCount(0);
            if (allDoctors != null) {
            
            for (DoctorDTO doctor : allDoctors) {
                Object[] rowData={
                doctor.getDoctorID(),    
                doctor.getName(),
                doctor.getMedRegNo(),
                doctor.getSpeciallity(),
                doctor.getHospital_name(),
                doctor.getTelephone_No()
            };
            dtm.addRow(rowData);
            } 
        }
        }catch (Exception ex) {
            Logger.getLogger(DoctorSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }
}
