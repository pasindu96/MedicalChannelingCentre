/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package lk.ac.uok.view;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.sql.Statement;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.logging.Level;
import java.util.logging.Logger;
import java.util.regex.PatternSyntaxException;
import javax.swing.ButtonGroup;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;
import lk.ac.uok.controller.ManageAppointementController;
import lk.ac.uok.controller.ManageDoctorController;
import lk.ac.uok.controller.ManageDoctorSessionController;
import lk.ac.uok.controller.ManagePatientController;
import lk.ac.uok.core.dto.CustomDTO;
import lk.ac.uok.core.dto.DoctorDTO;
import lk.ac.uok.core.dto.DoctorSessionDTO;
import lk.ac.uok.core.dto.PatientDTO;
import lk.ac.uok.dao.db.DBConnection;
import lk.ac.uok.validation.Validation;
import sun.java2d.pipe.ValidatePipe;

/**
 *
 * @author pasindu
 */
public class NewAppointementPanel extends javax.swing.JPanel {
    private int age;
    /**
     * Creates new form NewAppointementPanel
     */
    public NewAppointementPanel() {
        initComponents();
        startupProperties();
        loadAllDoctorNames();
        txtAppointmentNumber.setEditable(false);
        //loadAllSessions();
        //loadAllPatientsName();
        
        
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jXPanel1 = new org.jdesktop.swingx.JXPanel();
        jLabel9 = new javax.swing.JLabel();
        clearButton1 = new javax.swing.JButton();
        txtDate = new javax.swing.JTextField();
        clearButton2 = new javax.swing.JButton();
        txtAppointmentNumber = new javax.swing.JTextField();
        newPatientButton = new javax.swing.JButton();
        jLabel7 = new javax.swing.JLabel();
        cmbSession = new org.jdesktop.swingx.JXComboBox();
        jSeparator2 = new javax.swing.JSeparator();
        txtTelephone = new org.jdesktop.swingx.JXTextField();
        appointementAddButton = new javax.swing.JButton();
        cmbDoctor = new org.jdesktop.swingx.JXComboBox();
        jLabel8 = new javax.swing.JLabel();
        txtPName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtDOB = new javax.swing.JTextField();
        jXLabel1 = new org.jdesktop.swingx.JXLabel();
        jSeparator3 = new javax.swing.JSeparator();
        jLabel1 = new javax.swing.JLabel();
        jXLabel3 = new org.jdesktop.swingx.JXLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        txtPatientID = new javax.swing.JTextField();
        rdbtnFemale = new javax.swing.JRadioButton();
        rdbtnMale = new javax.swing.JRadioButton();
        jXPanel2 = new org.jdesktop.swingx.JXPanel();
        txtTime = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        confirmButton = new javax.swing.JButton();
        jLabel10 = new javax.swing.JLabel();
        jLabel11 = new javax.swing.JLabel();
        clearButton = new javax.swing.JButton();
        txtPaymentID = new javax.swing.JTextField();
        txtPatientName = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        txtAppointementPayment = new javax.swing.JTextField();
        jLabel13 = new javax.swing.JLabel();
        rdbtnSuccess = new javax.swing.JRadioButton();
        rdbtnNotSuccess = new javax.swing.JRadioButton();
        btnSearch = new org.jdesktop.swingx.JXButton();
        txtAppointmentNIC = new javax.swing.JTextField();
        jXLabel2 = new org.jdesktop.swingx.JXLabel();
        lblSessionTime = new javax.swing.JLabel();

        jXPanel1.setLayout(null);

        jLabel9.setText("Appointement No :");
        jXPanel1.add(jLabel9);
        jLabel9.setBounds(390, 200, 140, 24);

        clearButton1.setText("Clear");
        clearButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButton1ActionPerformed(evt);
            }
        });
        jXPanel1.add(clearButton1);
        clearButton1.setBounds(210, 220, 108, 30);

        txtDate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDateActionPerformed(evt);
            }
        });
        jXPanel1.add(txtDate);
        txtDate.setBounds(582, 80, 140, 24);

        clearButton2.setText("Clear");
        clearButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButton2ActionPerformed(evt);
            }
        });
        jXPanel1.add(clearButton2);
        clearButton2.setBounds(580, 250, 120, 34);

        txtAppointmentNumber.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAppointmentNumberActionPerformed(evt);
            }
        });
        jXPanel1.add(txtAppointmentNumber);
        txtAppointmentNumber.setBounds(580, 200, 70, 30);

        newPatientButton.setText("New Patient");
        newPatientButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                newPatientButtonActionPerformed(evt);
            }
        });
        jXPanel1.add(newPatientButton);
        newPatientButton.setBounds(10, 220, 109, 34);

        jLabel7.setText("Date");
        jXPanel1.add(jLabel7);
        jLabel7.setBounds(385, 81, 99, 24);

        cmbSession.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbSessionItemStateChanged(evt);
            }
        });
        jXPanel1.add(cmbSession);
        cmbSession.setBounds(580, 120, 220, 20);

        jSeparator2.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator2.setForeground(new java.awt.Color(0, 0, 0));
        jXPanel1.add(jSeparator2);
        jSeparator2.setBounds(-4, 300, 790, 2);

        txtTelephone.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtTelephoneActionPerformed(evt);
            }
        });
        jXPanel1.add(txtTelephone);
        txtTelephone.setBounds(211, 151, 147, 25);

        appointementAddButton.setText("Make Appointement");
        appointementAddButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                appointementAddButtonActionPerformed(evt);
            }
        });
        jXPanel1.add(appointementAddButton);
        appointementAddButton.setBounds(400, 250, 140, 34);

        cmbDoctor.addItemListener(new java.awt.event.ItemListener() {
            public void itemStateChanged(java.awt.event.ItemEvent evt) {
                cmbDoctorItemStateChanged(evt);
            }
        });
        cmbDoctor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDoctorActionPerformed(evt);
            }
        });
        jXPanel1.add(cmbDoctor);
        cmbDoctor.setBounds(580, 40, 140, 30);

        jLabel8.setText("Doctor");
        jXPanel1.add(jLabel8);
        jLabel8.setBounds(385, 46, 99, 24);

        txtPName.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPNameActionPerformed(evt);
            }
        });
        jXPanel1.add(txtPName);
        txtPName.setBounds(211, 41, 147, 27);

        jLabel2.setText("Sex");
        jXPanel1.add(jLabel2);
        jLabel2.setBounds(10, 113, 121, 24);

        txtDOB.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtDOBActionPerformed(evt);
            }
        });
        jXPanel1.add(txtDOB);
        txtDOB.setBounds(211, 79, 147, 24);

        jXLabel1.setText("Session");
        jXPanel1.add(jXLabel1);
        jXLabel1.setBounds(390, 120, 110, 22);

        jSeparator3.setBackground(new java.awt.Color(0, 0, 0));
        jSeparator3.setForeground(new java.awt.Color(0, 0, 0));
        jSeparator3.setOrientation(javax.swing.SwingConstants.VERTICAL);
        jXPanel1.add(jSeparator3);
        jSeparator3.setBounds(365, 0, 2, 300);

        jLabel1.setText("Patient Name");
        jXPanel1.add(jLabel1);
        jLabel1.setBounds(10, 44, 121, 24);

        jXLabel3.setText("Telephone number");
        jXPanel1.add(jXLabel3);
        jXLabel3.setBounds(10, 151, 121, 25);

        jLabel3.setText("DOB");
        jXPanel1.add(jLabel3);
        jLabel3.setBounds(10, 79, 121, 23);

        jLabel4.setText("Patient ID");
        jXPanel1.add(jLabel4);
        jLabel4.setBounds(10, 11, 121, 22);

        jLabel6.setText("Patient NIC");
        jXPanel1.add(jLabel6);
        jLabel6.setBounds(385, 11, 99, 24);

        txtPatientID.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtPatientIDActionPerformed(evt);
            }
        });
        jXPanel1.add(txtPatientID);
        txtPatientID.setBounds(211, 11, 147, 24);

        rdbtnFemale.setText("F");
        jXPanel1.add(rdbtnFemale);
        rdbtnFemale.setBounds(290, 110, 40, 23);

        rdbtnMale.setText("M");
        rdbtnMale.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rdbtnMaleActionPerformed(evt);
            }
        });
        jXPanel1.add(rdbtnMale);
        rdbtnMale.setBounds(220, 110, 40, 23);

        jLabel5.setText("Payment Time");

        confirmButton.setText("Confirm");
        confirmButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                confirmButtonActionPerformed(evt);
            }
        });

        jLabel10.setText("Payment Status");

        jLabel11.setText("Payment ID");

        clearButton.setText("Clear");
        clearButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                clearButtonActionPerformed(evt);
            }
        });

        jLabel12.setText("Patient Name");

        txtAppointementPayment.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                txtAppointementPaymentActionPerformed(evt);
            }
        });

        jLabel13.setText("Appointment ID");

        rdbtnSuccess.setText("Success");

        rdbtnNotSuccess.setText("Not Success");

        javax.swing.GroupLayout jXPanel2Layout = new javax.swing.GroupLayout(jXPanel2);
        jXPanel2.setLayout(jXPanel2Layout);
        jXPanel2Layout.setHorizontalGroup(
            jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addGap(148, 148, 148)
                .addComponent(txtPaymentID, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 129, Short.MAX_VALUE)
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jXPanel2Layout.createSequentialGroup()
                        .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(39, 39, 39)
                        .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jXPanel2Layout.createSequentialGroup()
                                .addComponent(rdbtnSuccess, javax.swing.GroupLayout.PREFERRED_SIZE, 91, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(18, 18, 18)
                                .addComponent(rdbtnNotSuccess))
                            .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 122, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jXPanel2Layout.createSequentialGroup()
                        .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(67, 67, 67)
                        .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 89, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(84, 84, 84))
            .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jXPanel2Layout.createSequentialGroup()
                    .addGap(0, 0, Short.MAX_VALUE)
                    .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jXPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41)
                            .addComponent(txtAppointementPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(jXPanel2Layout.createSequentialGroup()
                            .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGap(41, 41, 41)
                            .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 106, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(0, 550, Short.MAX_VALUE)))
        );
        jXPanel2Layout.setVerticalGroup(
            jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtTime, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel5, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(32, 32, 32)
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rdbtnSuccess)
                    .addComponent(rdbtnNotSuccess)
                    .addComponent(jLabel10, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(27, 27, 27)
                .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(clearButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(confirmButton, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(22, 63, Short.MAX_VALUE))
            .addGroup(jXPanel2Layout.createSequentialGroup()
                .addGap(106, 106, 106)
                .addComponent(txtPaymentID, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addGroup(jXPanel2Layout.createSequentialGroup()
                    .addGap(0, 10, Short.MAX_VALUE)
                    .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addGroup(jXPanel2Layout.createSequentialGroup()
                            .addGap(3, 3, 3)
                            .addComponent(jLabel13, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addComponent(txtAppointementPayment, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addGroup(jXPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                        .addComponent(jLabel12, javax.swing.GroupLayout.PREFERRED_SIZE, 34, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(txtPatientName, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGap(18, 18, 18)
                    .addComponent(jLabel11, javax.swing.GroupLayout.PREFERRED_SIZE, 32, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGap(0, 91, Short.MAX_VALUE)))
        );

        jXPanel1.add(jXPanel2);
        jXPanel2.setBounds(0, 300, 0, 240);

        btnSearch.setText("Search");
        btnSearch.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSearchActionPerformed(evt);
            }
        });
        jXPanel1.add(btnSearch);
        btnSearch.setBounds(720, 40, 80, 30);
        jXPanel1.add(txtAppointmentNIC);
        txtAppointmentNIC.setBounds(580, 0, 140, 30);

        jXLabel2.setText("Session Time");
        jXPanel1.add(jXLabel2);
        jXLabel2.setBounds(390, 160, 110, 22);
        jXPanel1.add(lblSessionTime);
        lblSessionTime.setBounds(580, 160, 140, 20);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 806, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 806, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 554, Short.MAX_VALUE)
            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                .addComponent(jXPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, 554, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void txtDateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDateActionPerformed
        txtAppointmentNumber.requestFocus();
    }//GEN-LAST:event_txtDateActionPerformed

    private void txtAppointmentNumberActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAppointmentNumberActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAppointmentNumberActionPerformed

    private void newPatientButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_newPatientButtonActionPerformed

        
        if(Validation.validateText(txtPName.getText())){
            JOptionPane.showMessageDialog(null, "Please fill Name");
            txtPName.requestFocus();
            return;
        }if(Validation.validateText(txtDOB.getText())){
            JOptionPane.showMessageDialog(null, "Please fill DOB");
            txtDOB.requestFocus();
            return;
        }if(Validation.validateText(txtTelephone.getText())){
            JOptionPane.showMessageDialog(null, "Please fill Telephone Number");
            txtTelephone.requestFocus();
            return;
        }
        if(rdbtnMale.isSelected() || rdbtnFemale.isSelected()){
            }else{
                JOptionPane.showMessageDialog(null, "Please select the gender");
                return;
            }
            if (Validation.validateDOB(txtDOB.getText()) ){
                if( Validation.validateMobile(txtTelephone.getText())){
                    PatientDTO patientDTO=new PatientDTO(txtPatientID.getText(), txtPName.getText(), txtDOB.getText(), rdbtnMale.isSelected()? "Male":"Female",txtTelephone.getText());
                    try {
                        boolean isAdded=ManagePatientController.addPatient(patientDTO);
                        if(isAdded){
                            JOptionPane.showMessageDialog(this, "Succefully Added");
                        }
                        else{
                           JOptionPane.showMessageDialog(this, "Occured an error"); 
                        }
                    } catch (Exception ex) {
                        Logger.getLogger(NewAppointementPanel.class.getName()).log(Level.SEVERE, null, ex);
                    }
                    
                    }else{
                        JOptionPane.showMessageDialog(null, "Use this Format for number (xxx-xxxxxxx)");
                        txtTelephone.selectAll();
                        txtTelephone.requestFocus();
                    }
            }else{
                    JOptionPane.showMessageDialog(null,"Please fill Customer DOB as this format (YYYY-MM-DD)");
                    txtDOB.selectAll();
                    txtDOB.requestFocus();
        }
            clearAllFields();
    }//GEN-LAST:event_newPatientButtonActionPerformed

    private void txtTelephoneActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtTelephoneActionPerformed
        newPatientButton.requestFocus();
    }//GEN-LAST:event_txtTelephoneActionPerformed

    private void txtPatientIDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPatientIDActionPerformed
        txtPatientName.requestFocus();;
    }//GEN-LAST:event_txtPatientIDActionPerformed

    private void clearButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButton1ActionPerformed
        txtPName.setText("");
        txtDOB.setText("");
        txtTelephone.setText("");
        txtPName.requestFocus();
    }//GEN-LAST:event_clearButton1ActionPerformed

    private void rdbtnMaleActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rdbtnMaleActionPerformed
      
    }//GEN-LAST:event_rdbtnMaleActionPerformed

    private void txtPNameActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtPNameActionPerformed
        txtDOB.requestFocus();
    }//GEN-LAST:event_txtPNameActionPerformed

    private void txtDOBActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtDOBActionPerformed
        getAge();
        txtTelephone.requestFocus();
    }//GEN-LAST:event_txtDOBActionPerformed

    private void clearButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButton2ActionPerformed
        txtAppointmentNumber.setText("");
    }//GEN-LAST:event_clearButton2ActionPerformed

    private void confirmButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_confirmButtonActionPerformed
        if(Validation.validateText(txtPatientName.getText())){
            JOptionPane.showMessageDialog(null, "Please fill Name field");
            txtPatientName.requestFocus();
            return;
        }else{
        }
        if(rdbtnSuccess.isSelected() || rdbtnNotSuccess.isSelected()){
        }else{
            JOptionPane.showMessageDialog(null, "Please Select payment status");
            return;
        }
        //System.err.println("Checch");
    }//GEN-LAST:event_confirmButtonActionPerformed

    private void clearButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_clearButtonActionPerformed
        txtPatientName.setText("");
        txtPatientName.requestFocus();
    }//GEN-LAST:event_clearButtonActionPerformed

    private void txtAppointementPaymentActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_txtAppointementPaymentActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_txtAppointementPaymentActionPerformed

    private void cmbDoctorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDoctorActionPerformed
        
    }//GEN-LAST:event_cmbDoctorActionPerformed

    private void cmbDoctorItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbDoctorItemStateChanged
        
//        try {
//            fillSessionDates();
//        } catch (Exception ex) {
//            Logger.getLogger(NewAppointementPanel.class.getName()).log(Level.SEVERE, null, ex);
//        }
//        
    }//GEN-LAST:event_cmbDoctorItemStateChanged

      SimpleDateFormat formatter = new SimpleDateFormat("HH:mm");  
      Date date = new Date();  
    private void appointementAddButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_appointementAddButtonActionPerformed
        try {
            Connection conn=DBConnection.getInstance().getConnection();
            String sql="insert into appointment values(?,?,?,?,?,?)";
            PreparedStatement pstm=conn.prepareStatement(sql);
            pstm.setObject(1, null);
            pstm.setObject(2, txtAppointmentNIC.getText());
            pstm.setObject(3, txtAppointmentNumber.getText());
            pstm.setObject(4, txtDate.getText());
            pstm.setObject(5, txtTime.getText());
            pstm.setObject(6, txtAppointmentNumber.getText());
            
            int affectedRaws=pstm.executeUpdate();
            if(affectedRaws>0){
                JOptionPane.showMessageDialog(this, "Appointment Added Succefully");
            }else{
                JOptionPane.showMessageDialog(this, "Appointment Added Succefully");
            }
                
        } catch (SQLException ex) {
            Logger.getLogger(NewAppointementPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_appointementAddButtonActionPerformed
    ArrayList<DoctorSessionDTO> sessionList;
    String sessiontime;
    private void btnSearchActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSearchActionPerformed

        try {
            DoctorDTO doctor = ManageDoctorController.searchDoctor(new DoctorDTO(null,cmbDoctor.getSelectedItem().toString(),null,null,null,null));
            //System.out.println(doctor.getDoctorID());

            if (cmbDoctor.getSelectedIndex() == -1) return;

            if (doctor == null) return;
                sessionList=ManageAppointementController.getSessionDates(doctor.getDoctorID());

            cmbSession.removeAllItems();
            if(sessionList==null) return;
                for (DoctorSessionDTO session : sessionList) {
                //System.out.println(session.getSessiondate());
                cmbSession.addItem(session.getSessiondate());

            }

            //txtDocID.setText(doctor.getDoctorID());

        }catch (Exception ex) {

        }

    }//GEN-LAST:event_btnSearchActionPerformed
    String sid;
    private void cmbSessionItemStateChanged(java.awt.event.ItemEvent evt) {//GEN-FIRST:event_cmbSessionItemStateChanged
        
        Connection conn=DBConnection.getInstance().getConnection();
        Connection conn2=DBConnection.getInstance().getConnection();
        sid=cmbSession.getSelectedItem().toString();
        for (DoctorSessionDTO sessionDTO : sessionList) {
            if(sessionDTO.getSessiondate().toString()==sid)
                sid=sessionDTO.getSID();
                
                
        }
        String sql="select count(SID)from appointment where sid=?";
        String sql2="select starttime from session where SID=?";
        try {
            PreparedStatement pstm=conn.prepareStatement(sql);
            pstm.setObject(1, sid);
            ResultSet rst=pstm.executeQuery();
            while(rst.next())
                txtAppointmentNumber.setText(""+(Integer.parseInt(rst.getString(1))+1));
            
            PreparedStatement pstm2=conn2.prepareStatement(sql2);
            pstm2.setObject(1, sid);
            ResultSet rst2=pstm2.executeQuery();
            while(rst2.next())
                lblSessionTime.setText(rst2.getString(1).toString());
                
        } catch (SQLException ex) {
            Logger.getLogger(NewAppointementPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
    }//GEN-LAST:event_cmbSessionItemStateChanged


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton appointementAddButton;
    private org.jdesktop.swingx.JXButton btnSearch;
    private javax.swing.JButton clearButton;
    private javax.swing.JButton clearButton1;
    private javax.swing.JButton clearButton2;
    private org.jdesktop.swingx.JXComboBox cmbDoctor;
    private org.jdesktop.swingx.JXComboBox cmbSession;
    private javax.swing.JButton confirmButton;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private org.jdesktop.swingx.JXLabel jXLabel1;
    private org.jdesktop.swingx.JXLabel jXLabel2;
    private org.jdesktop.swingx.JXLabel jXLabel3;
    private org.jdesktop.swingx.JXPanel jXPanel1;
    private org.jdesktop.swingx.JXPanel jXPanel2;
    private javax.swing.JLabel lblSessionTime;
    private javax.swing.JButton newPatientButton;
    private javax.swing.JRadioButton rdbtnFemale;
    private javax.swing.JRadioButton rdbtnMale;
    private javax.swing.JRadioButton rdbtnNotSuccess;
    private javax.swing.JRadioButton rdbtnSuccess;
    private javax.swing.JTextField txtAppointementPayment;
    private javax.swing.JTextField txtAppointmentNIC;
    private javax.swing.JTextField txtAppointmentNumber;
    private javax.swing.JTextField txtDOB;
    private javax.swing.JTextField txtDate;
    private javax.swing.JTextField txtPName;
    private javax.swing.JTextField txtPatientID;
    private javax.swing.JTextField txtPatientName;
    private javax.swing.JTextField txtPaymentID;
    private org.jdesktop.swingx.JXTextField txtTelephone;
    private javax.swing.JTextField txtTime;
    // End of variables declaration//GEN-END:variables

private void setDate() {
        Calendar currentCalendar = Calendar.getInstance();
        Date currentTime = currentCalendar.getTime();
        SimpleDateFormat timeFormat = new SimpleDateFormat("yyyy-MM-dd ");
        txtDate.setText(timeFormat.format(currentTime));
    }

    private void startupProperties() {
        ButtonGroup group = new ButtonGroup();
        group.add(rdbtnMale);
        group.add(rdbtnFemale);
        
        txtAppointmentNumber.setEditable(false);
        //txtAppointementID.setEditable(false);
        txtDate.setEditable(false);
        setDate();
    }
    
    private void loadAllDoctorNames() {
        try {
            ArrayList<DoctorDTO> allCustomers = ManageDoctorController.getAllDoctors();

            cmbDoctor.removeAllItems();
            if (allCustomers == null) return;
            
            for (DoctorDTO doctor : allCustomers) {
                cmbDoctor.addItem(doctor.getName());
            }
        } catch (Exception ex) {
            Logger.getLogger(DoctorSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    
    }

    private void loadAllSessions() {
        try {
            ArrayList<DoctorSessionDTO> allSessions = ManageDoctorSessionController.getAllDoctorsSession();

            cmbSession.removeAllItems();
            
            if (allSessions == null) return;
            
            for (DoctorSessionDTO session : allSessions) {
                cmbSession.addItem(session.getSessiondate());
            }
        } catch (Exception ex) {
            Logger.getLogger(DoctorSearch.class.getName()).log(Level.SEVERE, null, ex);
        }
    }

    private void fillSessionDates() throws Exception {
        DoctorDTO doctor=getDoctorID();
        cmbSession.removeAllItems();
            if (cmbDoctor.getSelectedIndex() == -1) return;
            
            
            if (doctor == null) return;
            ArrayList<DoctorSessionDTO> sessionList=ManageAppointementController.getSessionDates(doctor.getDoctorID());
            
            if(sessionList==null){return;};
            for (DoctorSessionDTO session : sessionList) {
                System.out.println(session.getSessiondate());
                cmbSession.addItem(session.getSessiondate());
                
            }
        
    }

    private DoctorDTO getDoctorID() throws Exception {
        System.out.println("doctor");
        return ManageDoctorController.searchDoctor(new DoctorDTO(null,cmbDoctor.getSelectedItem().toString(),null,null,null,null));
    }
    
    private void getAge(){
        try{
            String birth=txtDate.getText();
            age=Integer.parseInt(birth.substring(0,4));
            age=2017-age;
            System.out.println(age);
        }catch(Exception ex){   
    }
}

    private void clearAllFields() {
        txtPatientID.setText("");
        txtPName.setText("");
        txtTelephone.setText("");
        txtDOB.setText("");
        txtPatientID.requestFocus();
    }

    /*private void loadAllPatientsName() {
        try {
            Connection conn=DBConnection.getInstance().getConnection();
            String sql="select NIC from patient";
            Statement stm=conn.createStatement();
            ResultSet rst=stm.executeQuery(sql);
            
            while(rst.next()){
                cmbNIC.addItem(rst.getString(1));
            }
        } catch (SQLException ex) {
            Logger.getLogger(NewAppointementPanel.class.getName()).log(Level.SEVERE, null, ex);
        }
        
    }*/
}
